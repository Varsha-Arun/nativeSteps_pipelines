resources:
  - name: docker_build_repo
    type: GitRepo
    configuration:
      path: Varsha-Arun/nativeSteps_pipelines
      gitProvider: varshaGithub
      
  - name: docker_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildNumber: 1
      buildName: dockertest  
      
#   - name: unsigned_release_bundle_docker_build
#     type: ReleaseBundle
#     configuration:
#       sourceDistribution: dist
#       name: test-docker-local
#       version: v1.0
      
#   - name: signed_release_bundle_docker_build
#     type: ReleaseBundle
#     configuration:
#       sourceDistribution: dist
#       name: test-docker-local
#       version: v1.0

#   - name: distribution_rule_docker_build
#     type: DistributionRule
#     configuration:
#       sourceDistribution: dist
#       cityName: "*"
#       serviceName: "*"
#       siteName: "*"
#       countryCodes:
#         - IN

pipelines: 
  - name: thanos_tests
    steps:
      - name: t_bash_build
        type: Bash
        configuration:
          environmentVariables:
#             dockerImageName: avinci-docker-local.jfrog.io/app
            dockerImageName: https://thanosvarsha.jfrogdev.org/docker-stage-local/bashbuild
            dockerImageTag: ${run_number}
          integrations:
            - name: art
        execution:
          onStart:
#             - rm -rf $run_dir/workspace/jfrog
#             - retry_command jfrog rt config --url $int_demo_art_url --user $int_demo_art_user --apikey $int_demo_art_apikey --interactive=false
#             - pushd $res_be_gitRepo_resourcePath
#             - add_run_variables buildStepName=${step_name}
#             - add_run_variables ${step_name}_buildNumber=${run_number}
#             - add_run_variables ${step_name}_buildName=${pipeline_name}
            - docker build --pull --no-cache -t $dockerImageName:$dockerImageTag --build-arg REGISTRY=${int_art_url} .
#             - jfrog rt bce $pipeline_name $run_number
            - jfrog rt docker-push $dockerImageName:$dockerImageTag docker-stage-local --build-name=$pipeline_name --build-number=$run_number
 
      - name: docker_build
        type: DockerBuild
        configuration:
          #nodePool: aws-demo-pool
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: 'https://thanosvarsha.jfrogdev.org/docker-stage-local/thanospipeline'
          dockerImageTag: ${run_number}
          integrations:
            - name: art
          inputResources:
            - name: docker_build_repo    
          inputSteps:
            - name: t_bash_build
   
      - name: docker_push
        type: DockerPush
        configuration:
         # nodePool: aws-demo-pool
          targetRepository: test-docker-local
          integrations:
            - name: art
          inputSteps:
            - name: docker_build
            
      - name: docker_publish
        type: PublishBuildInfo
        configuration:
          #nodePool: aws-demo-pool
          inputSteps:
            - name: docker_push
          outputResources:
            - name: docker_build_info  
            
#       - name: bundle_docker
#         type: CreateReleaseBundle
#         configuration:
#           #nodePool: aws-demo-pool
#           releaseBundleName: test-docker-local
#           releaseBundleVersion: v0.1.$run_number
#           dryRun: false
#           sign: false
#           description: "docker build"
#           inputResources:
#             - name: docker_build_info
#           outputResources:
#             - name: unsigned_release_bundle_docker_build
#           releaseNotes:
#             syntax: markdown
#             content: |
#               ## This is a demo to test Docker Build 
#                 * Build -> Push -> Publish -> Bundle -> Sign -> Distribute
#                 * Points       
                 
#       - name: sign_release_bundle_docker
#         type: SignReleaseBundle
#         configuration:
#          # nodePool: aws-demo-pool
#           inputResources:
#             - name: unsigned_release_bundle_docker_build
#           outputResources:
#             - name: signed_release_bundle_docker_build
            
#       - name: dockerDistribute
#         type: DistributeReleaseBundle
#         configuration:
#         #  nodePool: aws-demo-pool
#           dryRun: false
#           inputResources:
#             - name: signed_release_bundle_docker_build
#             - name: distribution_rule_docker_build
#           integrations: 
#             - name: dist  
